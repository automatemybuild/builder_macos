#!/bin/bash
# 
# Script Name: mount_volumes.sh
# Description: This script automates the discovery and mounting of NFS volumes 
#              from a specified NAS hostname on macOS. It:
#              - Checks available exports from the NAS using showmount.
#              - Creates mount points in /Volumes based on available exports 
#                that include the local hostname.
#              - Adds entries to /etc/fstab for persistent mounting on startup.
#              - Optionally mounts all entries in /etc/fstab immediately.
# 
# Requirements: macOS, showmount command, NFS support.
# Note: This script is specifically designed for macOS environments.
# 
# Usage: ./mount_volumes.sh
# 

# Define the hostname
HOSTNAME="nas.localdomain"
LOCAL_HOSTNAME=$(hostname)

# Local mount base directory
MOUNT_BASE="/Volumes/nfs_share"

# Check if /etc/fstab exists and create a timestamped backup if it does
if [[ -f /etc/fstab ]]; then
    TIMESTAMP=$(date +"%y%m%d-%H%M")
    BACKUP_FILE="/etc/fstab.$TIMESTAMP"
    echo "Backing up /etc/fstab to $BACKUP_FILE..."
    sudo cp /etc/fstab "$BACKUP_FILE"
fi

# Add a header to /etc/fstab indicating that it was auto-generated by this script
CURRENT_TIME=$(date +"%Y-%m-%d %H:%M:%S")
HEADER_COMMENT="# Auto-generated by mount_volumes.sh on $CURRENT_TIME\n# Do not edit the file directly, use sudo vifs to edit the file.\n"
if ! grep -q "Auto-generated by mount_volumes.sh" /etc/fstab; then
    echo -e "$HEADER_COMMENT" | sudo tee -a /etc/fstab > /dev/null
fi

# Fetch available volumes from the given hostname
echo "Fetching available volumes from $HOSTNAME..."
AVAILABLE_VOLUMES=$(showmount -e "$HOSTNAME" 2>/dev/null)

# Verify if showmount returned any results
if [[ -z "$AVAILABLE_VOLUMES" ]]; then
    echo "No volumes available from $HOSTNAME or error in accessing."
    exit 1
fi

# Display the available exports
echo "Available exports from $HOSTNAME:"
echo "$AVAILABLE_VOLUMES"

# Process each line from showmount output to create mount points and add to /etc/fstab
echo "Processing volumes and creating mount points where local hostname is specified..."
while read -r line; do
    # Skip header if present and lines without the local hostname
    if [[ "$line" == "Exports list on "* || "$line" != *"$LOCAL_HOSTNAME"* ]]; then
        continue
    fi

    # Extract the volume path (e.g., /volume1/media)
    VOLUME_PATH=$(echo "$line" | awk '{print $1}')

    # Create a mount point based on the volume path name
    MOUNT_POINT="$MOUNT_BASE/$(basename "$VOLUME_PATH")"
    
    # Create the mount point directory if it doesn't exist
    if [[ ! -d "$MOUNT_POINT" ]]; then
        echo "Creating mount point directory $MOUNT_POINT..."
        sudo mkdir -p "$MOUNT_POINT"
    fi

    # Construct the fstab entry, using 'resvport' to ensure proper permissions
    FSTAB_ENTRY="$HOSTNAME:$VOLUME_PATH $MOUNT_POINT nfs rw,nolockd,resvport,hard,bg,intr,rw,tcp,nfc,rsize=65536,wsize=65536"

    # Check if the entry already exists in /etc/fstab before adding it
    if ! grep -qF "$FSTAB_ENTRY" /etc/fstab; then
        echo "Adding entry to /etc/fstab: $FSTAB_ENTRY"
        echo "$FSTAB_ENTRY" | sudo tee -a /etc/fstab > /dev/null
    else
        echo "Entry already exists in /etc/fstab: $FSTAB_ENTRY"
    fi

done <<< "$AVAILABLE_VOLUMES"

# Display the updated /etc/fstab
echo -e "\nUpdated /etc/fstab:"
cat /etc/fstab

# Show the created mount points in /Volumes
echo -e "\nCreated mount points in $MOUNT_BASE:"
ls -l "$MOUNT_BASE"

# Prompt the user if they would like to run the mount command
read -p "Would you like to mount all entries in /etc/fstab? [Y/n] " -r response
response=${response,,} # Convert to lowercase for easier matching

if [[ -z "$response" || "$response" == "y" || "$response" == "yes" ]]; then
    echo "Running mount command..."
    sudo mount -a
    echo -e "\nCurrent mounts:"
    mount | grep "$MOUNT_BASE"
else
    echo "Skipping mount."
fi

# Display the /Volumes directory with mounted directories
echo -e "\nContents of $MOUNT_BASE:"
ls -l "$MOUNT_BASE"

echo "Script completed."
#https://tisgoud.nl/2020/10/persistent-nfs-mount-points-on-macos/

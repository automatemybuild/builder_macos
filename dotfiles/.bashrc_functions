#!/usr/bin/env bash

ff() {
    # display function commands and descriptions
    grep "^# " ~/bin/functions.sh | sort
}
# f() - improved find command
f() { find . -xdev -iname "*${*}*"; }
# d() - improved du disk usage command
d() { du -had1 "${1:-.}" 2>/dev/null | sort -h; }
# fox() - start firefox from command line without console output
fox() { command firefox "$@" &>/dev/null & disown ; }
# calc() - command line calculator
calc() { echo "scale=3;$*" | bc -l; }
# uniq_lines() - unique line count for file
uniq_lines() { awk '!seen[$0]++' "$1"; }
# ex() - Extract various compressed file types
ex() {
    # decompress stuff
    for i in "$@";do
        case "$i" in
            *.tar.zst) tar --zstd -xf "$i" ;;
            *.tar.bz2) tar xvjf "$i"   ;;
            *.tar.gz)  tar xvzf "$i"   ;;
            *.tar)     tar xvf "$i"    ;;
            *.bz2)     bunzip2 "$i"    ;;
            *.zst)     unzstd "$i"     ;;
            *.rar)     unrar x -op"${i%.*}" "$i" ;;
            *.zip)     unzip "$i" -d "${i%.*}"   ;;
            *.gz)      gunzip "$i"     ;;
            *.7z)      7z x "$i"       ;;
            *.Z)       uncompress "$i" ;;
        esac || return 1
    done
}
# repeat() - Repeat command n times command
repeat() {
    # Repeat n times command
    local max=$1; shift;
    for ((i=1; i <= max ; i++)); do
        eval "$*";
    done
}
# loop() - Loop a command for n seconds 
loop() {
    # loop a command for n seconds
    local s
    [[ "$1" =~ ^[0-9]+$ ]] && { s=$1; shift; }
    [ -z "$1" ] && { printf 'Usage: loop <seconds> <cmd...>\n'; return 1; }
    while :;do eval "$*"; sleep "${s:-15}"; done
}
# lst() - list the total of files in the current directory and its subdirectories
lst() {
    # list the total of files in the current directory and its subdirectories
    local total
    {
        while read -r i;do
            c=$(command ls -1A "$i" | wc -l)
            (( total += c ))
            printf '%4s: %s\n' "$c" "$i"
        done < <(find "${@:-.}" -mindepth 0 -maxdepth 1 -type d);
        printf '%4s: total\n' "$total";
    } | sort -n 
}
# lst2() - same as `lst` but with columns
lst2() {
    # same as `lst` but with columns
    lst "${@:-.}" | pr -t4w 80;
}
lstar() {
    # list and extract tar files
    local tmpfile
    for i in "$@";do
        [ -f "$i" ] || continue
        printf '>>> \033[1;31m%s\033[m\n' "$i"
        tar tvf "$i" 2>/dev/null | less
        read -rp "extract '$i'? (y/N) " ask
        [ "${ask,,}" = 'y' ] && tar axvf "$i"
    done
    return 0
}
# todo() - simple todo list
todo() {
    TODOFILE=${TODOFILE:-${HOME}/.todo}
    [ -s "$TODOFILE" ] && sed -i '/^[ \t]*\?$/d' "$TODOFILE"
    case "$1" in
        ed) [ -s "$TODOFILE" ] && "${EDITOR:-vim}" "$TODOFILE" ;;
        ls)
            if test -s "$TODOFILE";then
                printf '\n\e[1;30;43m TODO \033[m\n'
                cat "$TODOFILE"; echo
            fi
        ;;
        rm)
            nl "$TODOFILE"
            read -r -p ": " n
            [[ "$n" =~ ^[0-9]+$ ]] && sed -i "${n}d" "$TODOFILE"
        ;;
        add)
            shift
            [ -n "$1" ] && printf '%s: %s\n' \
                "$(date +'%Y.%m.%d %H:%M')" "$*" | tee -a "$TODOFILE"
        ;;
        *) echo 'Usage: todo [ed ls rm add] <TODO>' ;;
    esac
}
frep() {
    # find repeated files
    find . -maxdepth "${1:-3}" -type f -printf '%f\n' | sort | uniq -d |
    sed -e 's/[]\[?\*\$]/\\&/g' | tr \\n \\0 | xargs -0rI{} find . -type f -name '{}'
}
